(declare-const frame-rigid Bool)
(declare-const scan-barcode_I_1_0 Bool)
(declare-const scan-barcode_E_1_0 Bool)
(declare-const scan-barcode_F_1_0 Bool)
(declare-const scan-barcode_U_1_0 Bool)
(declare-const scan-barcode_PreCondition_1_0 Bool)
(declare-const scan-barcode_PostCondition_1_0 Bool)
(declare-const scan-barcode_I_1_1 Bool)
(declare-const scan-barcode_E_1_1 Bool)
(declare-const scan-barcode_F_1_1 Bool)
(declare-const scan-barcode_U_1_1 Bool)
(declare-const scan-barcode_PreCondition_1_1 Bool)
(declare-const scan-barcode_PostCondition_1_1 Bool)
(declare-const mount_I_1_0 Bool)
(declare-const mount_E_1_0 Bool)
(declare-const mount_F_1_0 Bool)
(declare-const mount_U_1_0 Bool)
(declare-const mount_PreCondition_1_0 Bool)
(declare-const mount_PostCondition_1_0 Bool)
(declare-const mount_I_1_1 Bool)
(declare-const mount_E_1_1 Bool)
(declare-const mount_F_1_1 Bool)
(declare-const mount_U_1_1 Bool)
(declare-const mount_PreCondition_1_1 Bool)
(declare-const mount_PostCondition_1_1 Bool)
(assert frame-rigid); Constraint 1 , Source: GroupCardinality
(assert frame-rigid); Constraint 2 , Source: formula3
(assert (and (=> scan-barcode_I_1_0 frame-rigid)
     (=> frame-rigid scan-barcode_I_1_0)
     (not scan-barcode_E_1_0)
     (not scan-barcode_F_1_0)
     (=> scan-barcode_U_1_0 (not frame-rigid))
     (=> (not frame-rigid) scan-barcode_U_1_0))); Constraint 3 , Source: formula4-ActiveOperations
(assert (and (=> mount_I_1_0 frame-rigid)
     (=> frame-rigid mount_I_1_0)
     (not mount_E_1_0)
     (not mount_F_1_0)
     (=> mount_U_1_0 (not frame-rigid))
     (=> (not frame-rigid) mount_U_1_0))); Constraint 4 , Source: formula4-ActiveOperations
(assert scan-barcode_PreCondition_1_0); Constraint 5 , Source: formula5-Precondition
(assert (=> (and scan-barcode_I_1_0 scan-barcode_PreCondition_1_0) scan-barcode_E_1_1)); Constraint 6 , Source: formula5.1
(assert (=> (not scan-barcode_I_1_0)
    (and (=> scan-barcode_I_1_0 scan-barcode_I_1_1)
         (=> scan-barcode_I_1_1 scan-barcode_I_1_0)))); Constraint 7 , Source: formula5.2
(assert (or scan-barcode_I_1_0 scan-barcode_E_1_0 scan-barcode_F_1_0 scan-barcode_U_1_0)); Constraint 8 , Source: formula5.3-Firstpart
(assert (let ((a!1 (=> scan-barcode_F_1_0
               (and (and (not scan-barcode_I_1_0) (not scan-barcode_E_1_0))
                    (not scan-barcode_U_1_0))))
      (a!2 (=> scan-barcode_U_1_0
               (and (and (not scan-barcode_I_1_0) (not scan-barcode_E_1_0))
                    (not scan-barcode_F_1_0)))))
  (and (=> scan-barcode_I_1_0
           (and (not scan-barcode_E_1_0)
                (not scan-barcode_F_1_0)
                (not scan-barcode_U_1_0)))
       (=> scan-barcode_E_1_0
           (and (not scan-barcode_I_1_0)
                (not scan-barcode_F_1_0)
                (not scan-barcode_U_1_0)))
       a!1
       a!2))); Constraint 9 , Source: formula5.3-Secondpart
(assert scan-barcode_PostCondition_1_0); Constraint 10 , Source: formula5.4-Postcondition
(assert (=> (and scan-barcode_E_1_0 scan-barcode_PostCondition_1_0) scan-barcode_F_1_1)); Constraint 11 , Source: formula5.4
(assert (and (=> scan-barcode_U_1_0 scan-barcode_U_1_1)
     (=> scan-barcode_U_1_1 scan-barcode_U_1_0))); Constraint 12 , Source: formula5.6
(assert (=> scan-barcode_F_1_0 scan-barcode_F_1_1)); Constraint 13 , Source: formula5.7
(assert (not mount_PreCondition_1_0)); Constraint 14 , Source: formula5-Precondition
(assert (=> (and mount_I_1_0 mount_PreCondition_1_0) mount_E_1_1)); Constraint 15 , Source: formula5.1
(assert (=> (not (and mount_I_1_0 mount_PreCondition_1_0))
    (and (=> mount_I_1_0 mount_I_1_1) (=> mount_I_1_1 mount_I_1_0)))); Constraint 16 , Source: formula5.2
(assert (or mount_I_1_0 mount_E_1_0 mount_F_1_0 mount_U_1_0)); Constraint 17 , Source: formula5.3-Firstpart
(assert (let ((a!1 (=> mount_F_1_0
               (and (and (not mount_I_1_0) (not mount_E_1_0)) (not mount_U_1_0))))
      (a!2 (=> mount_U_1_0
               (and (and (not mount_I_1_0) (not mount_E_1_0)) (not mount_F_1_0)))))
  (and (=> mount_I_1_0
           (and (not mount_E_1_0) (not mount_F_1_0) (not mount_U_1_0)))
       (=> mount_E_1_0
           (and (not mount_I_1_0) (not mount_F_1_0) (not mount_U_1_0)))
       a!1
       a!2))); Constraint 18 , Source: formula5.3-Secondpart
(assert (not mount_PostCondition_1_0)); Constraint 19 , Source: formula5.4-Postcondition
(assert (=> (and mount_E_1_0 (not mount_PostCondition_1_0)) mount_F_1_1)); Constraint 20 , Source: formula5.4
(assert (and (=> mount_U_1_0 mount_U_1_1) (=> mount_U_1_1 mount_U_1_0))); Constraint 21 , Source: formula5.6
(assert (=> mount_F_1_0 mount_F_1_1)); Constraint 22 , Source: formula5.7
(declare-const P0 Bool)
(assert scan-barcode_PreCondition_1_0); Constraint 23 , Source: formula7-Precondition
(assert scan-barcode_PostCondition_1_0); Constraint 24 , Source: formula7-Postcondition
(assert (not mount_PreCondition_1_0)); Constraint 25 , Source: formula7-Precondition
(assert (not mount_PostCondition_1_0)); Constraint 26 , Source: formula7-Postcondition
(assert (let ((a!1 (and (or (and (not scan-barcode_PreCondition_1_0) scan-barcode_I_1_0)
                    (and (not scan-barcode_PostCondition_1_0)
                         scan-barcode_E_1_0)
                    scan-barcode_F_1_0
                    scan-barcode_U_1_0)
                (or (and (not mount_PreCondition_1_0) mount_I_1_0)
                    (and (not mount_PostCondition_1_0) mount_E_1_0)
                    mount_F_1_0
                    mount_U_1_0)
                (or scan-barcode_I_1_0
                    scan-barcode_E_1_0
                    mount_I_1_0
                    mount_E_1_0))))
  (=> P0 a!1))); Constraint 27 , Source: overallGoal
(declare-const scan-barcode_I_1_2 Bool)
(declare-const scan-barcode_E_1_2 Bool)
(declare-const scan-barcode_F_1_2 Bool)
(declare-const scan-barcode_U_1_2 Bool)
(declare-const scan-barcode_PreCondition_1_2 Bool)
(declare-const scan-barcode_PostCondition_1_2 Bool)
(declare-const mount_I_1_2 Bool)
(declare-const mount_E_1_2 Bool)
(declare-const mount_F_1_2 Bool)
(declare-const mount_U_1_2 Bool)
(declare-const mount_PreCondition_1_2 Bool)
(declare-const mount_PostCondition_1_2 Bool)
(assert frame-rigid); Constraint 28 , Source: GroupCardinality
(assert frame-rigid); Constraint 29 , Source: formula3
(assert (and (=> scan-barcode_I_1_0 frame-rigid)
     (=> frame-rigid scan-barcode_I_1_0)
     (not scan-barcode_E_1_0)
     (not scan-barcode_F_1_0)
     (=> scan-barcode_U_1_0 (not frame-rigid))
     (=> (not frame-rigid) scan-barcode_U_1_0))); Constraint 30 , Source: formula4-ActiveOperations
(assert (and (=> mount_I_1_0 frame-rigid)
     (=> frame-rigid mount_I_1_0)
     (not mount_E_1_0)
     (not mount_F_1_0)
     (=> mount_U_1_0 (not frame-rigid))
     (=> (not frame-rigid) mount_U_1_0))); Constraint 31 , Source: formula4-ActiveOperations
(assert scan-barcode_PreCondition_1_1); Constraint 32 , Source: formula5-Precondition
(assert (=> (and scan-barcode_I_1_1 scan-barcode_PreCondition_1_1) scan-barcode_E_1_2)); Constraint 33 , Source: formula5.1
(assert (=> (not scan-barcode_I_1_1)
    (and (=> scan-barcode_I_1_1 scan-barcode_I_1_2)
         (=> scan-barcode_I_1_2 scan-barcode_I_1_1)))); Constraint 34 , Source: formula5.2
(assert (or scan-barcode_I_1_1 scan-barcode_E_1_1 scan-barcode_F_1_1 scan-barcode_U_1_1)); Constraint 35 , Source: formula5.3-Firstpart
(assert (let ((a!1 (=> scan-barcode_F_1_1
               (and (and (not scan-barcode_I_1_1) (not scan-barcode_E_1_1))
                    (not scan-barcode_U_1_1))))
      (a!2 (=> scan-barcode_U_1_1
               (and (and (not scan-barcode_I_1_1) (not scan-barcode_E_1_1))
                    (not scan-barcode_F_1_1)))))
  (and (=> scan-barcode_I_1_1
           (and (not scan-barcode_E_1_1)
                (not scan-barcode_F_1_1)
                (not scan-barcode_U_1_1)))
       (=> scan-barcode_E_1_1
           (and (not scan-barcode_I_1_1)
                (not scan-barcode_F_1_1)
                (not scan-barcode_U_1_1)))
       a!1
       a!2))); Constraint 36 , Source: formula5.3-Secondpart
(assert scan-barcode_PostCondition_1_1); Constraint 37 , Source: formula5.4-Postcondition
(assert (=> (and scan-barcode_E_1_1 scan-barcode_PostCondition_1_1) scan-barcode_F_1_2)); Constraint 38 , Source: formula5.4
(assert (and (=> scan-barcode_U_1_1 scan-barcode_U_1_2)
     (=> scan-barcode_U_1_2 scan-barcode_U_1_1))); Constraint 39 , Source: formula5.6
(assert (=> scan-barcode_F_1_1 scan-barcode_F_1_2)); Constraint 40 , Source: formula5.7
(assert (not mount_PreCondition_1_1)); Constraint 41 , Source: formula5-Precondition
(assert (=> (and mount_I_1_1 mount_PreCondition_1_1) mount_E_1_2)); Constraint 42 , Source: formula5.1
(assert (=> (not (and mount_I_1_1 mount_PreCondition_1_1))
    (and (=> mount_I_1_1 mount_I_1_2) (=> mount_I_1_2 mount_I_1_1)))); Constraint 43 , Source: formula5.2
(assert (or mount_I_1_1 mount_E_1_1 mount_F_1_1 mount_U_1_1)); Constraint 44 , Source: formula5.3-Firstpart
(assert (let ((a!1 (=> mount_F_1_1
               (and (and (not mount_I_1_1) (not mount_E_1_1)) (not mount_U_1_1))))
      (a!2 (=> mount_U_1_1
               (and (and (not mount_I_1_1) (not mount_E_1_1)) (not mount_F_1_1)))))
  (and (=> mount_I_1_1
           (and (not mount_E_1_1) (not mount_F_1_1) (not mount_U_1_1)))
       (=> mount_E_1_1
           (and (not mount_I_1_1) (not mount_F_1_1) (not mount_U_1_1)))
       a!1
       a!2))); Constraint 45 , Source: formula5.3-Secondpart
(assert (not mount_PostCondition_1_1)); Constraint 46 , Source: formula5.4-Postcondition
(assert (=> (and mount_E_1_1 (not mount_PostCondition_1_1)) mount_F_1_2)); Constraint 47 , Source: formula5.4
(assert (and (=> mount_U_1_1 mount_U_1_2) (=> mount_U_1_2 mount_U_1_1))); Constraint 48 , Source: formula5.6
(assert (=> mount_F_1_1 mount_F_1_2)); Constraint 49 , Source: formula5.7
(declare-const P1 Bool)
(assert scan-barcode_PreCondition_1_1); Constraint 50 , Source: formula7-Precondition
(assert scan-barcode_PostCondition_1_1); Constraint 51 , Source: formula7-Postcondition
(assert (not mount_PreCondition_1_1)); Constraint 52 , Source: formula7-Precondition
(assert (not mount_PostCondition_1_1)); Constraint 53 , Source: formula7-Postcondition
(assert (let ((a!1 (and (or (and (not scan-barcode_PreCondition_1_1) scan-barcode_I_1_1)
                    (and (not scan-barcode_PostCondition_1_1)
                         scan-barcode_E_1_1)
                    scan-barcode_F_1_1
                    scan-barcode_U_1_1)
                (or (and (not mount_PreCondition_1_1) mount_I_1_1)
                    (and (not mount_PostCondition_1_1) mount_E_1_1)
                    mount_F_1_1
                    mount_U_1_1)
                (or scan-barcode_I_1_1
                    scan-barcode_E_1_1
                    mount_I_1_1
                    mount_E_1_1))))
  (=> P1 a!1))); Constraint 54 , Source: overallGoal
(declare-const scan-barcode_I_1_3 Bool)
(declare-const scan-barcode_E_1_3 Bool)
(declare-const scan-barcode_F_1_3 Bool)
(declare-const scan-barcode_U_1_3 Bool)
(declare-const scan-barcode_PreCondition_1_3 Bool)
(declare-const scan-barcode_PostCondition_1_3 Bool)
(declare-const mount_I_1_3 Bool)
(declare-const mount_E_1_3 Bool)
(declare-const mount_F_1_3 Bool)
(declare-const mount_U_1_3 Bool)
(declare-const mount_PreCondition_1_3 Bool)
(declare-const mount_PostCondition_1_3 Bool)
(assert frame-rigid); Constraint 55 , Source: GroupCardinality
(assert frame-rigid); Constraint 56 , Source: formula3
(assert (and (=> scan-barcode_I_1_0 frame-rigid)
     (=> frame-rigid scan-barcode_I_1_0)
     (not scan-barcode_E_1_0)
     (not scan-barcode_F_1_0)
     (=> scan-barcode_U_1_0 (not frame-rigid))
     (=> (not frame-rigid) scan-barcode_U_1_0))); Constraint 57 , Source: formula4-ActiveOperations
(assert (and (=> mount_I_1_0 frame-rigid)
     (=> frame-rigid mount_I_1_0)
     (not mount_E_1_0)
     (not mount_F_1_0)
     (=> mount_U_1_0 (not frame-rigid))
     (=> (not frame-rigid) mount_U_1_0))); Constraint 58 , Source: formula4-ActiveOperations
(assert scan-barcode_PreCondition_1_2); Constraint 59 , Source: formula5-Precondition
(assert (=> (and scan-barcode_I_1_2 scan-barcode_PreCondition_1_2) scan-barcode_E_1_3)); Constraint 60 , Source: formula5.1
(assert (=> (not scan-barcode_I_1_2)
    (and (=> scan-barcode_I_1_2 scan-barcode_I_1_3)
         (=> scan-barcode_I_1_3 scan-barcode_I_1_2)))); Constraint 61 , Source: formula5.2
(assert (or scan-barcode_I_1_2 scan-barcode_E_1_2 scan-barcode_F_1_2 scan-barcode_U_1_2)); Constraint 62 , Source: formula5.3-Firstpart
(assert (let ((a!1 (=> scan-barcode_F_1_2
               (and (and (not scan-barcode_I_1_2) (not scan-barcode_E_1_2))
                    (not scan-barcode_U_1_2))))
      (a!2 (=> scan-barcode_U_1_2
               (and (and (not scan-barcode_I_1_2) (not scan-barcode_E_1_2))
                    (not scan-barcode_F_1_2)))))
  (and (=> scan-barcode_I_1_2
           (and (not scan-barcode_E_1_2)
                (not scan-barcode_F_1_2)
                (not scan-barcode_U_1_2)))
       (=> scan-barcode_E_1_2
           (and (not scan-barcode_I_1_2)
                (not scan-barcode_F_1_2)
                (not scan-barcode_U_1_2)))
       a!1
       a!2))); Constraint 63 , Source: formula5.3-Secondpart
(assert scan-barcode_PostCondition_1_2); Constraint 64 , Source: formula5.4-Postcondition
(assert (=> (and scan-barcode_E_1_2 scan-barcode_PostCondition_1_2) scan-barcode_F_1_3)); Constraint 65 , Source: formula5.4
(assert (and (=> scan-barcode_U_1_2 scan-barcode_U_1_3)
     (=> scan-barcode_U_1_3 scan-barcode_U_1_2))); Constraint 66 , Source: formula5.6
(assert (=> scan-barcode_F_1_2 scan-barcode_F_1_3)); Constraint 67 , Source: formula5.7
(assert (=> (and mount_I_1_2 scan-barcode_F_1_2) mount_E_1_3)); Constraint 68 , Source: formula5.1
(assert (=> (not (and mount_I_1_2 scan-barcode_F_1_2))
    (and (=> mount_I_1_2 mount_I_1_3) (=> mount_I_1_3 mount_I_1_2)))); Constraint 69 , Source: formula5.2
(assert (or mount_I_1_2 mount_E_1_2 mount_F_1_2 mount_U_1_2)); Constraint 70 , Source: formula5.3-Firstpart
(assert (let ((a!1 (=> mount_F_1_2
               (and (and (not mount_I_1_2) (not mount_E_1_2)) (not mount_U_1_2))))
      (a!2 (=> mount_U_1_2
               (and (and (not mount_I_1_2) (not mount_E_1_2)) (not mount_F_1_2)))))
  (and (=> mount_I_1_2
           (and (not mount_E_1_2) (not mount_F_1_2) (not mount_U_1_2)))
       (=> mount_E_1_2
           (and (not mount_I_1_2) (not mount_F_1_2) (not mount_U_1_2)))
       a!1
       a!2))); Constraint 71 , Source: formula5.3-Secondpart
(assert (=> (and mount_E_1_2 scan-barcode_F_1_2) mount_F_1_3)); Constraint 72 , Source: formula5.4
(assert (and (=> mount_U_1_2 mount_U_1_3) (=> mount_U_1_3 mount_U_1_2))); Constraint 73 , Source: formula5.6
(assert (=> mount_F_1_2 mount_F_1_3)); Constraint 74 , Source: formula5.7
(declare-const P2 Bool)
(assert scan-barcode_PreCondition_1_2); Constraint 75 , Source: formula7-Precondition
(assert scan-barcode_PostCondition_1_2); Constraint 76 , Source: formula7-Postcondition
(assert (let ((a!1 (and (or (and (not scan-barcode_PreCondition_1_2) scan-barcode_I_1_2)
                    (and (not scan-barcode_PostCondition_1_2)
                         scan-barcode_E_1_2)
                    scan-barcode_F_1_2
                    scan-barcode_U_1_2)
                (or (and (not scan-barcode_F_1_2) mount_I_1_2)
                    (and (not scan-barcode_F_1_2) mount_E_1_2)
                    mount_F_1_2
                    mount_U_1_2)
                (or scan-barcode_I_1_2
                    scan-barcode_E_1_2
                    mount_I_1_2
                    mount_E_1_2))))
  (=> P2 a!1))); Constraint 77 , Source: overallGoal
