(declare-const frame-rigid Bool)
(declare-const scan-barcode_I_1_0 Bool)
(declare-const scan-barcode_E_1_0 Bool)
(declare-const scan-barcode_F_1_0 Bool)
(declare-const scan-barcode_U_1_0 Bool)
(declare-const scan-barcode_PreCondition_1_0 Bool)
(declare-const scan-barcode_PostCondition_1_0 Bool)
(declare-const scan-barcode_I_1_1 Bool)
(declare-const scan-barcode_E_1_1 Bool)
(declare-const scan-barcode_F_1_1 Bool)
(declare-const scan-barcode_U_1_1 Bool)
(declare-const scan-barcode_PreCondition_1_1 Bool)
(declare-const scan-barcode_PostCondition_1_1 Bool)
(assert frame-rigid); Constraint 1 , Source: GroupCardinality
(assert frame-rigid); Constraint 2 , Source: formula3
(assert (and (=> scan-barcode_I_1_0 frame-rigid)
     (=> frame-rigid scan-barcode_I_1_0)
     (not scan-barcode_E_1_0)
     (not scan-barcode_F_1_0)
     (=> scan-barcode_U_1_0 (not frame-rigid))
     (=> (not frame-rigid) scan-barcode_U_1_0))); Constraint 3 , Source: formula4-ActiveOperations
(assert scan-barcode_PreCondition_1_0); Constraint 4 , Source: formula5-Precondition
(assert scan-barcode_PostCondition_1_0); Constraint 5 , Source: formula5-Postcondition
(assert (=> (and scan-barcode_I_1_0 scan-barcode_PreCondition_1_0)
    (or scan-barcode_I_1_1 scan-barcode_E_1_1))); Constraint 6 , Source: formula5.1
(assert (=> (not (and scan-barcode_I_1_0 scan-barcode_PreCondition_1_0))
    (and (=> scan-barcode_I_1_0 scan-barcode_I_1_1)
         (=> scan-barcode_I_1_1 scan-barcode_I_1_0)))); Constraint 7 , Source: formula5.2
(assert (let ((a!1 (and (or (and scan-barcode_I_1_0 (not scan-barcode_E_1_0))
                    (and (not scan-barcode_I_1_0) scan-barcode_E_1_0))
                (not scan-barcode_F_1_0)))
      (a!2 (not (or (and scan-barcode_I_1_0 (not scan-barcode_E_1_0))
                    (and (not scan-barcode_I_1_0) scan-barcode_E_1_0)))))
(let ((a!3 (and (not (or a!1 (and a!2 scan-barcode_F_1_0))) scan-barcode_U_1_0)))
  (or (and (or a!1 (and a!2 scan-barcode_F_1_0)) (not scan-barcode_U_1_0)) a!3)))); Constraint 8 , Source: formula5.3
(assert scan-barcode_PostCondition_1_0); Constraint 9 , Source: formula5.4-Postcondition
(assert (=> (and scan-barcode_E_1_0 scan-barcode_PostCondition_1_0) scan-barcode_F_1_1)); Constraint 10 , Source: formula5.4
(assert (and (=> scan-barcode_U_1_0 scan-barcode_U_1_1)
     (=> scan-barcode_U_1_1 scan-barcode_U_1_0))); Constraint 11 , Source: formula5.6
(assert (=> scan-barcode_F_1_0 scan-barcode_F_1_1)); Constraint 12 , Source: formula5.7
(assert scan-barcode_PreCondition_1_0); Constraint 13 , Source: formula5.8-Precondition
(assert scan-barcode_PostCondition_1_0); Constraint 14 , Source: formula5.8-Postcondition
(assert (=> (and scan-barcode_I_1_0 scan-barcode_PreCondition_1_0) scan-barcode_E_1_1)); Constraint 15 , Source: formula5.8
(declare-const P0 Bool)
(assert scan-barcode_PreCondition_1_0); Constraint 16 , Source: formula7-Precondition
(assert scan-barcode_PostCondition_1_0); Constraint 17 , Source: formula7-Postcondition
(assert scan-barcode_PreCondition_1_0); Constraint 18 , Source: formula7-Precondition
(assert scan-barcode_PostCondition_1_0); Constraint 19 , Source: formula7-Postcondition
(assert (let ((a!1 (and (or (and (not scan-barcode_PreCondition_1_0) scan-barcode_I_1_0)
                    (and (not scan-barcode_PostCondition_1_0)
                         scan-barcode_E_1_0)
                    scan-barcode_F_1_0
                    scan-barcode_U_1_0)
                (or scan-barcode_I_1_0 scan-barcode_E_1_0))))
  (=> P0 a!1))); Constraint 20 , Source: overallGoal
